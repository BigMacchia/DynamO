#    DYNAMO:- Event driven molecular dynamics simulator 
#    http://www.marcusbannerman.co.uk/dynamo
#    Copyright (C) 2009  Marcus N Campbell Bannerman <m.bannerman@gmail.com>
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    version 3 as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

##########################################################################
#Location of the boost build root directory
path-constant BOOST_ROOT : src/boost/tools/build/v2 ;
path-constant BUILD_DIR_PATH : ./build-dir ;

path-constant LIB_INSTALL_PATH : ./lib ;
path-constant BIN_INSTALL_PATH : ./bin ;
path-constant INCLUDE_INSTALL_PATH : ./include ;

##########################################################################
#If the build-dir doesn't exist at the very start of the build, all
#the configuration test build output goes to stdout. So we create the
#directory now
import os ;
if [ os.name ] = NT
{ SHELL "mkdir "$(BUILD_DIR_PATH) ; }
else
{ SHELL "mkdir -p "$(BUILD_DIR_PATH) ; }

##########################################################################
#Additional build variants
#
# The fulldebug variant uses compiler and library features to aid in debugging
# We might consider adding <cxxflags>ansi <cxxflags>pedantic
#<cxxflags>Weffc++ <define>_GLIBXX_DEBUG_PEDANTIC
#<define>_GLIBCXX_DEBUG_PEDANTIC <define>_GLIBCXX_CONCEPT_CHECKS
#<define>_GLIBCPP_DEBUG_PEDANTIC <define>_GLIBCPP_DEBUG
#<define>_GLIBCPP_CONCEPT_CHECKS
variant fulldebug : debug : <define>_GLIBCXX_DEBUG  <define>DYNAMO_DEBUG  <define>DYNAMO_CollDebug <define>DYNAMO_WallCollDebug <cxxflags>-fstack-protector-all <define>DYNAMO_OverlapTesting ;

# The valgrind variant is useful for code analysis in tools like
# valgrind. It merely turns debug symbols on and turns inlining off
variant valgrind : <inlining>off <optimization>speed <debug-symbols>on <profiling>off ;
# The same as valgrind but with inlining on
variant valgrind_in : valgrind : <inlining>on  ;

##########################################################################
#Main project definition
project	: requirements
          <threading>multi
	  ##Allow garbage collection of unused linked symbols
	  <toolset>gcc:<cflags>-ffunction-sections
	  <toolset>gcc:<cflags>-fdata-sections
	  <toolset>gcc:<linkflags>-Wl,--gc-sections
          <toolset>clang:<cflags>-Wno-parentheses
          <toolset>clang:<cflags>-Wno-mismatched-tags
          <toolset>clang:<cflags>-Wno-ambiguous-member-template
	  <variant>release:<define>NDEBUG
          #This creates a feature coil-integration, which can be set
          #on the command line or auto-detected using the passed target
	: default-build release
	: build-dir $(BUILD_DIR_PATH)
	;

##########################################################################
#Targets

use-project /dynamo : src/dynamo ;
use-project /magnet : src/magnet ;
use-project /boost : src/boost ;
use-project /coil : src/coil ;

alias install : /dynamo//install-dynamo /coil//install-coil /magnet//install-magnet ;

alias test : /magnet//test ;

alias coilparticletest : /coil//coilparticletest ;

explicit install test coilparticletest ;
