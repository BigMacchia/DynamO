#using intel-linux ;
using gcc ;

path-constant BOOST_ROOT : boost/tools/build/v2 ;

import type ;

project
	: requirements <variant>debug:<define>DYNAMO_DEBUG 
	  <define>DYNAMO_double_precsision 
	  <variant>release:<define>DYNAMO_Colour
	  <variant>release:<runtime-link>static
	  <variant>debug:<define>DYNAMO_DEBUG <link>static
	  #<define>DYNAMO_WallCollDebug
	  #<toolset>gcc:<cxxflags>-ansi
	  #<toolset>gcc:<cxxflags>-pedantic
	  <toolset>gcc:<cxxflags>-Wno-long-long
	  <toolset>gcc:<cxxflags>-Wno-parentheses
	  <tag>@naming
	: default-build release
	: build-dir build-dir
	;

rule naming ( name : type ? : property-set )
{
  local result = ;

  if [ type.is-derived $(type) EXE ]
  {  
     switch [ $(property-set).get <variant> ]
     {
     case debug : result += $(name)_d ;
     case cachegrind : result += $(name)_cg ;
     case profile : result += $(name)_p ;
     case * : result += $(name) ;
     }
  }

  #This joins all list elements with no seperator
  return $(result:J=) ;
}

variant cachegrind : <inlining>off <optimization>speed <debug-symbols>on 
	<profiling>off ;

variant colldebug : debug : <define>DYNAMO_CollDebug ;

exe dynareplex_opt 
    : programs/replex_opt.cpp boost//program_options 
    :
    ;

exe dynahist_rw 
    : programs/hist_rw.cpp src//dynamo_core/<link>static
    :
    ;

exe dynarun 
    : programs/mdrun.cpp src//dynamo_core/<link>static
    : 
    ;

exe dynamod 
    : programs/configmod.cpp src//dynamo_core/<link>static
    : 
    ;

install install-bin 
	: dynareplex_opt dynahist_rw dynarun dynamod 
	: <location>bin
	;
	
install install-lib 
	: src//dynamo_core 
	: <location>lib <variant>release
	;

alias install : install-bin install-lib ;

explicit install install-bin install-lib ;