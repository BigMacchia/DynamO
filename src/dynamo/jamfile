#    DYNAMO:- Event driven molecular dynamics simulator 
#    http://www.marcusbannerman.co.uk/dynamo
#    Copyright (C) 2009  Marcus N Campbell Bannerman <m.bannerman@gmail.com>
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    version 3 as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import feature ;
import ../magnet/jam/builddep ;
import ../magnet/jam/tags ;

lib bz2 : : <link>shared ;

obj iostream_bzip2_support : ../boost/libs/iostreams/src/bzip2.cpp : <include>../boost/ : : <source>bz2 ;

exe bzip2test : tests/bzip2test.cpp bz2 ;

SHELL "touch src/dynamo/tests/* " ;

project	: requirements
          #This creates a feature coil-integration, which can be set
          #on the command line or auto-detected using the passed target
	  [ builddep.set-feature-on-build dynamo-bzip2 : bzip2test : "DynamO: bzip2 library" ]
	  [ builddep.set-feature-on-build coil-integration : /coil//coilDependencies : "DynamO-Coil Integration" ]
	  [ builddep.combine-features dynamo-buildable : dynamo-bzip2 ]
	: default-build release
	: build-dir $(BUILD_DIR_PATH)
	;

lib rt : : <link>shared ;

exe dynamoDependencies : tests/buildreq.cpp : <dynamo-buildable>no:<define>BUILDFAIL ;

lib dynamo_core : [ glob-tree *.cpp : programs tests ]
      /magnet//magnet /boost//filesystem
      /boost//program_options rt iostream_bzip2_support
    : <include>include <include>. <dynamo-buildable>no:<build>no
      <variant>debug:<define>DYNAMO_DEBUG <link>static
      <coil-integration>yes:<source>/coil//coil/<link>static
      <coil-integration>yes:<define>DYNAMO_visualizer
    : : <include>include 
    <variant>debug:<define>DYNAMO_DEBUG <threading>multi <link>static <include>.
    ;

#This rule tests for the dynamo dependencies and returns <build>no if
#they're not satisfied
rule critical_dependencies ( )
{ return [ check-target-builds dynamoDependencies "DynamO dependencies" :  : <build>no ] ; }

exe dynarun : programs/dynarun.cpp dynamo_core 
    : <dynamo-buildable>no:<build>no <tag>@tags.exe-naming ;
exe dynahist_rw : programs/dynahist_rw.cpp dynamo_core 
    : <dynamo-buildable>no:<build>no <tag>@tags.exe-naming ;
exe dynamod : programs/dynamod.cpp dynamo_core 
    : <dynamo-buildable>no:<build>no <tag>@tags.exe-naming ;

explicit dynamod dynahist_rw dynarun dynamo_core visualizer test ;

install install-dynamo
	: dynarun  dynahist_rw dynamod 
	: <location>$(BIN_INSTALL_PATH) <dynamo-buildable>no:<build>no
	;
