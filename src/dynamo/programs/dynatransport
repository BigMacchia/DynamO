#!/usr/bin/env python
import os
import xml.etree.ElementTree as ET

#Function to load a (possibly compressed) xml file.
def loadXMLFile(filename):
    #Check if the file is compressed or not, and 
    if (os.path.splitext(filename)[1][1:].strip() == "bz2"):
        import bz2
        f = bz2.BZ2File(filename)
        doc = ET.parse(f)
        f.close()
        return doc
    else:
        return etree.parse(filename)

#Command line argument parsing
from optparse import OptionParser
parser = OptionParser()
parser.add_option("-c", "--cutoff-time", dest="cutofftime", type="float", default=1e300,
                  help="The TIME beyond which data from the correlators are discarded.", metavar="TIME", )
parser.add_option("-s", "--start-time", dest="starttime",
                  help="The amount of TIME to discard data at the start of the correlator.", 
                  type="float", default=0, metavar="TIME")

parser.add_option("-v", "--view-fit", action="store_true", default=False,
                  dest="plot", help="View the fits of the correlators")

(options, datafiles) = parser.parse_args()

#Sort out the data file option
if len(datafiles) is 0:
    print "Need to supply at least one input file!"
    import sys
    sys.exit()

def parseToArray(text):
    data = []
    for line in text.strip().split("\n"):
        dataline = map(float, line.split())
        if (len(dataline) > 1) and (dataline[0] >= options.starttime) and (dataline[0] <= options.cutofftime):
            data.append(dataline)
    return data

def statistics(data):
    average = 0
    sqraverage = 0
    averageoffset = 0
    for element in data:
        averageoffset += element[1]
        average += element[0]
        sqraverage += element[0] * element[0]
    import math
    return [average / len(data),  math.sqrt((sqraverage / len(data)) - (average / len(data)) * (average / len(data))), averageoffset / len(data)]

def avg(data):
    return sum(data) / len(data)

def stddev(data):
    average = avg(data)
    return avg([(item - average)**2 for item in data])

def fitData(datacolumns, data, title):
    import numpy as np
    import math
    xvalues = [line[0] for line in data]
    yvalues = [avg([line[column] for column in datacolumns]) for line in data]
    yerrvalues = [math.sqrt(stddev([line[column] for column in datacolumns])) for line in data]
    returnval = statistics([np.polyfit(xvalues, yvalues, 1)])
    if (options.plot):
        import matplotlib.pyplot as plt
        plt.title("$"+title+"="+str(returnval[0])+"\pm"+str(returnval[1])+"$")
        plt.errorbar(xvalues, yvalues, yerr=yerrvalues, fmt='x')
        minx = min(xvalues)
        maxx = max(xvalues)
        plt.plot([minx, maxx], [minx*returnval[0] + returnval[2], maxx * returnval[0] + returnval[2]])
        plt.show()
    return returnval

def worker(columns, dataarray, title):
    result = fitData(columns, dataarray, title)
    print title,"=",result[0],result[1],result[2]


viscosity_data = []
thermalconductivity_data = []
thermaldiffusion_data = {}
mutualdiffusion_data = {}
for filename in datafiles:
    if not os.path.exists(filename):
        print "Could not find the passed datafile! ("+filename+")"
        import sys
        sys.exit()

    XMLDoc = loadXMLFile(filename)
    RootElement=XMLDoc.getroot()
    for xmlelement in RootElement.findall(".//Viscosity/Correlator"):
        viscosity_data.extend(parseToArray(xmlelement.text))
    for xmlelement in RootElement.findall(".//ThermalConductivity/Correlator"):
        thermalconductivity_data.extend(parseToArray(xmlelement.text))
    for xmlelement in RootElement.findall(".//ThermalDiffusion/Correlator"):
        key = xmlelement.attrib["Species"]
        thermaldiffusion_data.setdefault(key, []).extend(parseToArray(xmlelement.text))
    for xmlelement in RootElement.findall(".//MutualDiffusion/Correlator"):
        key=xmlelement.attrib["Species1"]+","+xmlelement.attrib["Species2"]
        mutualdiffusion_data.setdefault(key, []).extend(parseToArray(xmlelement.text))

worker([3, 4, 7], viscosity_data, "Shear\\ viscosity\\ L_{\\eta,\\eta}")
worker([2,6,10], viscosity_data, "Bulk\\ viscosity\\ L_{\\kappa,\\kappa}")
worker([2, 3, 4], thermalconductivity_data, "Thermal\\ conductivity\\ L_{\\lambda,\\lambda}")
for species, data in thermaldiffusion_data.items():
    worker([2, 3, 4], data, "Thermal\\ diffusion\\ L_{\\lambda,"+species+"}")
for key, data in mutualdiffusion_data.items():
    worker([2, 3, 4], data, "Mutual\\ diffusion\\ L_{"+key+"}")
