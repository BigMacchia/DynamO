#!/usr/bin/env python
import os
import xml.etree.ElementTree as ET
import sys
import math

#Function to load a (possibly compressed) xml file.
def loadXMLFile(filename):
    #Check if the file is compressed or not, and 
    if (os.path.splitext(filename)[1][1:].strip() == "bz2"):
        import bz2
        f = bz2.BZ2File(filename)
        doc = ET.parse(f)
        f.close()
        return doc
    else:
        return etree.parse(filename)

#Command line argument parsing
from optparse import OptionParser
parser = OptionParser()
parser.add_option("-i", "--input", dest="datafile",
                  help="Load the simulation data from FILE, also can be a position argument", metavar="FILE")
parser.add_option("-c", "--cutoff-time", dest="cutofftime", type="float", default=1e300,
                  help="The TIME beyond which data from the correlators are discarded.", metavar="TIME", )
parser.add_option("-s", "--start-time", dest="starttime",
                  help="The amount of TIME to discard data at the start of the correlator.", 
                  type="float", default=0, metavar="TIME")

parser.add_option("-v", "--view-fit", action="store_true", default=False,
                  dest="plot", help="View the fits of the correlators")

(options, args) = parser.parse_args()

#Sort out the data file option
if options.datafile == None:
    if len(args) != 1:
        print "Need to supply an input file using either an -i FILE or just FILE"
        sys.exit()
    options.datafile=args[0]

if not os.path.exists(options.datafile):
    print "Could not find the passed datafile! ("+options.datafile+")"
    sys.exit()

XMLDoc = loadXMLFile(options.datafile)
RootElement=XMLDoc.getroot()

def parseToArray(text):
    data = []
    for line in text.strip().split("\n"):
        dataline = map(float, line.split())
        if (len(dataline) > 1) and (dataline[0] > options.starttime) and (dataline[0] < options.cutofftime):
            data.append(dataline)
    return data

def statistics(data):
    average = 0
    sqraverage = 0
    averageoffset = 0
    for element in data:
        averageoffset += element[1]
        average += element[0]
        sqraverage += element[0] * element[0]
    return [average / len(data),  math.sqrt((sqraverage / len(data)) - (average / len(data)) * (average / len(data))), averageoffset / len(data)]

def fitData(datacolumns, data, title):
    import numpy as np
    xvalues = [line[0] for line in data]
    returnval = statistics([np.polyfit(xvalues, [line[column] for line in data], 1) for column in datacolumns])
    if (options.plot):
        import matplotlib.pyplot as plt
        plt.title("$"+title+"="+str(returnval[0])+"\pm"+str(returnval[1])+"$")
        for column in datacolumns:
            plt.plot(xvalues, [line[column] for line in data], 'x')
        plt.plot([xvalues[0], xvalues[-1]], [xvalues[0]*returnval[0] + returnval[2], xvalues[-1]*returnval[0] + returnval[2]])
        plt.show()
    return returnval

def worker(columns, text, title):
    result = fitData(columns, parseToArray(text), title)
    print title,"=",result[0],result[1],result[2]

for xmlelement in RootElement.findall(".//Viscosity/Correlator"):
    worker([3, 4, 7], xmlelement.text, "L_{\\eta,\\eta}")

for xmlelement in RootElement.findall(".//Viscosity/Correlator"):
    worker([2,6,10], xmlelement.text, "L_{\\kappa,\\kappa}")

for xmlelement in RootElement.findall(".//ThermalConductivity/Correlator"):
    worker([2, 3, 4], xmlelement.text, "L_{\\lambda,\\lambda}")

for xmlelement in RootElement.findall(".//ThermalDiffusion/Correlator"):
    worker([2, 3, 4], xmlelement.text, "L_{\\lambda,"+xmlelement.get("Species")+"}")

for xmlelement in RootElement.findall(".//MutualDiffusion/Correlator"):
    worker([2, 3, 4], xmlelement.text, "L_{"+xmlelement.get("Species1")+","+xmlelement.get("Species2")+"}")
