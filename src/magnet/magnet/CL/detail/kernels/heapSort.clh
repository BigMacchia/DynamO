/*    DYNAMO:- Event driven molecular dynamics simulator 
 *    http://www.marcusbannerman.co.uk/dynamo
 *    Copyright (C) 2009  Marcus N Campbell Bannerman <m.bannerman@gmail.com>
 *
 *    This program is free software: you can redistribute it and/or
 *    modify it under the terms of the GNU General Public License
 *    version 3 as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//Simple macro to convert a token to a string
#define STRINGIFY(A) #A

namespace magnet {
  namespace CL {
    template<class T>
    inline std::string 
    heapSort<T>::kernelSource()
    {
      return std::string("#define keyType ") + detail::traits<T>::kernel_type() + "\n"
	STRINGIFY(
void siftDown(__global keyType* numbers, int root, int bottom)
{
  int done = 0;
 
  done = 0;
  while ((root*2 <= bottom) && (!done))
  {
    int maxChild = root * 2 + 1;

    if (root*2 == bottom)
      maxChild = root * 2;
    else if (numbers[root * 2] > numbers[root * 2 + 1])
      maxChild = root * 2;
    
    if (numbers[root] < numbers[maxChild])
      {
	keyType temp = numbers[root];
	numbers[root] = numbers[maxChild];
	numbers[maxChild] = temp;
	root = maxChild;
      }
    else
      done = 1;
  }
}

__kernel void heapSort(__global keyType* numbers, uint array_size)
{
  int i;
 
  for (i = (array_size / 2) - 1; i >= 0; i--)
    siftDown(numbers, i, array_size - 1);
 
  for (i = array_size-1; i >= 1; i--)
  {
    keyType temp = numbers[0];
    numbers[0] = numbers[i];
    numbers[i] = temp;
    siftDown(numbers, 0, i-1);
  }
}
		  );
    }
  }
}

