/*    DYNAMO:- Event driven molecular dynamics simulator 
 *    http://www.marcusbannerman.co.uk/dynamo
 *    Copyright (C) 2009  Marcus N Campbell Bannerman <m.bannerman@gmail.com>
 *
 *    This program is free software: you can redistribute it and/or
 *    modify it under the terms of the GNU General Public License
 *    version 3 as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//Simple macro to convert a token to a string
#define STRINGIFY(A) #A

#include <sstream>

namespace magnet {
  namespace GL {
    inline std::string 
    SSAO::vertexShaderSource()
    {
      return 
STRINGIFY( 
//varying vec2 uv;
	  
void main(void)
{
  gl_Position = ftransform();
  gl_TexCoord[0] = gl_MultiTexCoord0;
}
);
    }
    
    inline std::string 
    SSAO::fragmentShaderSource()
    {
      return 
STRINGIFY(
uniform sampler2D u_Texture0;
uniform sampler2D u_Texture1;
uniform float radius;
uniform float totStrength;
uniform float strength;
uniform float offset;
uniform float falloff;
const float invSamples = 1.0 / 10.0;

//uniform sampler2D rnm;
//varying vec2 uv;

void main(void)
{
  // these are the random vectors inside a unit sphere
  vec3 pSphere[10] = vec3[10](vec3(-0.010735935, 0.01647018, 0.0062425877),
			      vec3(-0.06533369, 0.3647007, -0.13746321),
			      vec3(-0.6539235, -0.016726388, -0.53000957),
			      vec3(0.40958285, 0.0052428036, -0.5591124),
			      vec3(-0.1465366, 0.09899267, 0.15571679),
			      vec3(-0.44122112, -0.5458797, 0.04912532),
			      vec3(0.03755566, -0.10961345, -0.33040273),
			      vec3(0.019100213, 0.29652783, 0.066237666),
			      vec3(0.8765323, 0.011236004, 0.28265962),
			      vec3(0.29264435, -0.40794238, 0.15964167));
  
  // grab a normal for reflecting the sample rays later on
  vec3 fres = vec3(1,0,0);//normalize((texture2D(rnm,uv*offset).xyz*2.0) - vec3(1.0));
  
  vec4 currentPixelSample = texture2D(u_Texture1, gl_TexCoord[0].st);
  
  float currentPixelDepth = currentPixelSample.a;
  
  // current fragment coords in screen space
  vec3 ep = vec3(gl_TexCoord[0].st, currentPixelDepth);
  // get the normal of current fragment
  vec3 norm = currentPixelSample.xyz;
  
  float bl = 0.0;
  // adjust for the depth ( not shure if this is good..)
  float radD = radius ;/// currentPixelDepth;
  
  //vec3 ray, se, occNorm;
  float occluderDepth;
  float depthDifference;
  vec4 occluderFragment;
  vec3 ray;
  for(int i = 0; i < 10; ++i)
    {
      // get a vector (randomized inside of a sphere with radius 1.0) from a texture and reflect it
      ray = radD*reflect(pSphere[i],fres);
      
      // get the depth of the occluder fragment
      occluderFragment = texture2D(u_Texture1,ep.xy + sign(dot(ray,norm) )*ray.xy);
      // if depthDifference is negative = occluder is behind current fragment
      depthDifference = currentPixelDepth-occluderFragment.a;
      
      // calculate the difference between the normals as a weight
      // the falloff equation, starts at falloff and is kind of 1/x^2 falling
      bl += step(falloff,depthDifference)*(1.0-dot(occluderFragment.xyz,norm))*(1.0-smoothstep(falloff,strength,depthDifference));
    }
  
  // output the result
  //gl_FragColor.r = 1.0 + bl * invSamples;
  float val = 1.0 - bl * totStrength * invSamples;
  if (val > 1) val = 1;
  if (val < 0) val = 0;
  
  gl_FragColor = vec4(texture2D(u_Texture0, gl_TexCoord[0].st).xyz * val, 1.0);

  gl_FragColor.r = val;
}
);
    }
  }
}
