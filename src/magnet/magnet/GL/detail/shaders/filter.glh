/*    DYNAMO:- Event driven molecular dynamics simulator 
 *    http://www.marcusbannerman.co.uk/dynamo
 *    Copyright (C) 2009  Marcus N Campbell Bannerman <m.bannerman@gmail.com>
 *
 *    This program is free software: you can redistribute it and/or
 *    modify it under the terms of the GNU General Public License
 *    version 3 as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//Simple macro to convert a token to a string
#define STRINGIFY(A) #A

#include <sstream>

namespace magnet {
  namespace GL {

    template<class T, int stencilwidth>
    inline std::string 
    filter::vertexShaderSource()
    {
      return std::string("#define stencilwidth ") + ((std::ostringstream() << stencilwidth).str()) +
STRINGIFY( 
/////////////////////////////////////////////////
// 7x1 gaussian blur fragment shader
/////////////////////////////////////////////////
uniform vec2 u_Scale;
uniform vec2 weights[stencilwidth];
uniform sampler2D u_Texture0;

void main()
{
  vec4 color = 0.0;
  for(int i = 0; i < stencilwidth; ++i)
    color += gaussFilter[i].y
      * texture2D(u_Texture0, gl_TexCoord[0].st 
		  + vec2(weights[i].x * u_Scale.x, weights[i].x * u_Scale.y));
  
  gl_FragColor = color;
}
);
    }

    template<class T, int stencilwidth>
    inline std::string 
    filter::fragmentShaderSource()
    {
      //Simple writethrough fragment shader
      return
	STRINGIFY(
void main()
{
  gl_FragColor =  gl_Color;
}
);
    }
  }
}
