/*    DYNAMO:- Event driven molecular dynamics simulator 
 *    http://www.marcusbannerman.co.uk/dynamo
 *    Copyright (C) 2009  Marcus N Campbell Bannerman <m.bannerman@gmail.com>
 *
 *    This program is free software: you can redistribute it and/or
 *    modify it under the terms of the GNU General Public License
 *    version 3 as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//Simple macro to convert a token to a string
#define STRINGIFY(A) #A

namespace magnet {
  namespace GL {
    inline std::string 
    shadowShader::vertexShaderSource()
    {
      return
STRINGIFY( 
// Used for shadow lookup
varying vec4 ShadowCoord;

void main()
{
  ShadowCoord= gl_TextureMatrix[7] * gl_Vertex;
  gl_Position = ftransform();
  gl_FrontColor = gl_Color;
}
);
    }

    inline std::string 
    shadowShader::fragmentShaderSource()
    {
      return
STRINGIFY( 
uniform sampler2DShadow ShadowMap;

varying vec4 ShadowCoord;

// This define the value to move one pixel left or right
uniform float xPixelOffset ;

// This define the value to move one pixel up or down
uniform float yPixelOffset ;

void main()
{
  float shadow;

//  for (float y = -30.5 ; y <=30.5 ; y+=10.0)
//    for (float x = -30.5 ; x <=30.5 ; x+=10.0)
//      shadow += shadow2DProj(ShadowMap, ShadowCoord + vec4(ShadowCoord.w * x, ShadowCoord.w * y, 0.05, 0.0)).w;
//
//  shadow /= 64.0;

  shadow += shadow2DProj(ShadowMap, ShadowCoord + vec4(0, 0, 0, 0.0)).r;

  gl_FragColor = (shadow+0.2) * gl_Color;
}
);
    }
  }
}
