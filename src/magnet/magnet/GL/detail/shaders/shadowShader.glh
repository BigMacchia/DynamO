/*    DYNAMO:- Event driven molecular dynamics simulator 
 *    http://www.marcusbannerman.co.uk/dynamo
 *    Copyright (C) 2009  Marcus N Campbell Bannerman <m.bannerman@gmail.com>
 *
 *    This program is free software: you can redistribute it and/or
 *    modify it under the terms of the GNU General Public License
 *    version 3 as published by the Free Software Foundation.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

//Simple macro to convert a token to a string
#define STRINGIFY(A) #A

namespace magnet {
  namespace GL {
    inline std::string 
    shadowShader::vertexShaderSource()
    {
      return
STRINGIFY( 
varying vec4 ShadowCoord; // Used for shadow lookup
varying vec3 lightDir; //Direction of the light
varying float lightDist; //Distance to the light
varying vec3 normal; //The surface normal
varying vec4 diffuse; //Lighting terms
varying vec4 ambientGlobal; //Lighting terms
varying vec4 ambient; //Lighting terms
varying vec3 halfVector;

void main()
{
  //Normal calculations
  normal = normalize(gl_NormalMatrix * gl_Normal);
  
  //Shadow coordinate calculations
  ShadowCoord = gl_TextureMatrix[7] * gl_ModelViewMatrix * gl_Vertex;

  //light position calculations
  vec3 lightVec = vec3(gl_LightSource[0].position - gl_ModelViewMatrix * gl_Vertex);
  lightDir = normalize(lightVec);
  lightDist = length(lightVec);

  //Lighting calculations
  diffuse = gl_Color * gl_LightSource[0].diffuse;
  ambient = gl_Color * gl_LightSource[0].ambient;
  ambientGlobal = gl_LightModel.ambient * gl_Color;

  //Specular calculations
  halfVector = normalize(gl_LightSource[0].halfVector.xyz);
  
  //Standard vertex transformation
  gl_Position = ftransform();
}
);
    }

    inline std::string 
    shadowShader::fragmentShaderSource()
    {
      return
STRINGIFY( 
uniform sampler2DShadow ShadowMap; //The sampler for the shadow map
varying vec4 ShadowCoord; // Texture coordinate used for shadow lookup
uniform int shadowMapping; //If shadow mapping is enabled or not
uniform float shadowIntensity; //How dark the shadow is

varying vec3 lightDir; //Direction of the light
varying float lightDist; //Distance to the light
varying vec3 normal; //The surface normal
varying vec4 diffuse; //Lighting terms
varying vec4 ambientGlobal;
varying vec4 ambient; 

varying vec3 halfVector;

void main()
{
  ///Shadow map calculations and PCF.
  float shadow = 0 ;  
  const int steps = 3;
  const float step = 0.001f;
  const float stepoffset = (steps - 1.0f) * 0.5f;
  
  vec3 renormLightDir = normalize(lightDir);

  //Flip the normal for 2 sided rendering and renormalize the normals again
  vec3 renormal = (-1 + 2 * (gl_FrontFacing)) * normalize(normal);  
  
  //Now get the diffuse term to smooth shadow acne on back faces
  float lightNormDot = dot(renormal, renormLightDir);  
  if (shadowMapping == 1)
    {
      if (ShadowCoord.w > 1.0)
	for (int x = 0; x < 3; ++x)
	  for (int y = 0; y < 3; ++y)
	    //Replace textureProj with shadow2DProj to make it work on old versions of GLSL
	    shadow += textureProj(ShadowMap, ShadowCoord 
				  + vec4((-stepoffset + x) * step * ShadowCoord.w, 
					 (-stepoffset + y) * step * ShadowCoord.w, 
					 0,//-0.00002,
					 0)).r;
  
      shadow /= steps * steps;

      float shadeFactor = max(0, min(1, 1 + 2 * lightNormDot));
      
      //Now set a minimum on the shadow term depending on if the
      //surface is pointing away from the light source
      shadow = min(shadow, shadeFactor);
    }
  else
    shadow = 1.0;

  //Start the color calculation with the global ambient
  vec4 color = ambientGlobal;

  //This is the attenuation of the light source with distance
  float attenuation =  1.0 / (gl_LightSource[0].constantAttenuation +
		      gl_LightSource[0].linearAttenuation * lightDist +
		      gl_LightSource[0].quadraticAttenuation * lightDist * lightDist);
 
  //Shadow intensity
  float scaledShadow = (1 + shadowIntensity * (shadow - 1));

  //Specular and ambient light calculation
  if (lightNormDot > 0.0) 
    {
      //We use a shadow map instead of a spotlight calculation
      vec3 halfV = normalize(halfVector);
      float NdotHV = dot(renormal, halfV);
      
      //We multiply by shadow to stop the specular highlight appearing in the shadow
      color += shadow * attenuation * gl_FrontMaterial.specular * gl_LightSource[0].specular 
	* pow(NdotHV, gl_FrontMaterial.shininess)
	;
      
      //We add on the ambient component of the spotlight
      color += shadow * attenuation * ambient;
    }

  //The diffusive term
  float rescaledDot = 0.5 * lightNormDot + 0.5;
  color += attenuation * scaledShadow * rescaledDot * rescaledDot * diffuse;

  gl_FragColor = color;
}
);
    }
  }
}
